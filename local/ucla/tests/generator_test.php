<?php
/**
 * PHPUnit data generator tests
 *
 * @package    local_ucla
 * @category   phpunit
 * @copyright  2013 UC Regents
*/

defined('MOODLE_INTERNAL') || die();

// @todo Include local_ucla generator code, because "getDataGenerator" does not
// yet work for local plugins. When local plugins are support, please change
// $generator = new local_ucla_generator();
// to
// $generator = $this->getDataGenerator()->get_plugin_generator('local_ucla');
global $CFG;
require_once($CFG->dirroot . '/local/ucla/lib.php');
require_once($CFG->dirroot . '/local/ucla/tests/generator/lib.php');

/**
 * PHPUnit data generator testcase
 *
 * @package    local_ucla
 * @category   phpunit
 * @copyright  2013 UC Regents
 */
class local_ucla_generator_testcase extends advanced_testcase {
    private $generator = null;

    /**
     * Try to pass an array of two empty arrays to tell the random class creator
     * to create a random crosslisted class.
     * 
     * @global object $DB
     */
    public function test_create_class_empty_crosslisted() {
        global $DB;
        
        $beforecourse = $DB->count_records('course');
        $beforerequest = $DB->count_records('ucla_request_classes');

        $param = array(array(), array());
        $created_class = $this->generator->create_class($param);
        $this->assertFalse(empty($created_class));

        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');

        $this->assertEquals($beforecourse+1, $aftercourse);
        $this->assertEquals($beforerequest+2, $afterrequest);
    }

    /**
     * Try to create too many autogenerated classes.
     *
     * @expectedException dml_exception
     */
    public function test_create_class_exception_autogen() {
        $num_terms = count($this->generator->terms);
        $num_srs_numbers = count($this->generator->srs_numbers);

        // we should only be able to automatically generate term*srs classes,
        // so +1 to that should guarantee an exception at some point
        $total_runs = ($num_terms*$num_srs_numbers)+1;
        for ($i = 0; $i < $total_runs; $i++) {
            $this->generator->create_class();
        }
    }

    /**
     * Try to create a duplicate class.
     *
     * @expectedException dml_exception
     */
    public function test_create_class_exception_manual() {
        $param = array('term' => '13F', 'srs' => '262508200',
            'department' => 'MATH', 'course' => '135-1');
        $this->generator->create_class($param);
        // this should raise an exception
        $this->generator->create_class($param);
    }

    /**
     * Try to create a randomly created class.
     * 
     * @global object $DB
     */
    public function test_create_class_random() {
        global $DB;

        $beforecourse = $DB->count_records('course');
        $beforerequest = $DB->count_records('ucla_request_classes');

        $created_class = $this->generator->create_class();
        $this->assertFalse(empty($created_class));

        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');

        $this->assertGreaterThan($beforecourse, $aftercourse);
        $this->assertGreaterThan($beforerequest, $afterrequest);
    }

    /**
     * Try to create a bunch of classes for a given term.
     * 
     * @global object $DB
     */
    public function test_create_class_term() {
        global $DB;

        $numcourses = $DB->count_records('course');
        $numrequests = $DB->count_records('ucla_request_classes');

        // generate a class with all fields defined
        $param = array('term' => '13F', 'srs' => '262508200',
            'department' => 'MATH', 'course' => '135-1');
        $created_class = $this->generator->create_class($param);
        $this->assertFalse(empty($created_class));
        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');
        $this->assertEquals($numcourses+1, $aftercourse);
        $this->assertEquals($numrequests+1, $afterrequest);
        $numcourses = $aftercourse;
        $numrequests = $afterrequest;

        // generate a crosslisted class with all fields defined
        $param = array(
            array('term' => '13F', 'srs' => '285061200',
                'department' => 'NR EAST', 'course' => 'M20-1'),
            array('term' => '13F', 'srs' => '257060200',
                'department' => 'ASIAN', 'course' => 'M20-1'));
        $created_class = $this->generator->create_class($param);
        $this->assertFalse(empty($created_class));
        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');
        $this->assertEquals($numcourses+1, $aftercourse);
        $this->assertEquals($numrequests+2, $afterrequest);
        $numcourses = $aftercourse;
        $numrequests = $afterrequest;

        // make sure that all created courses belong to 13F
        $terms = $DB->get_fieldset_select('ucla_request_classes', 'term',
                '', array());
        foreach ($terms as $term) {
            $this->assertEquals('13F', $term, 'here0');
        }

        // generate a random non-crosslisted class
        $param = array(array('term' => '13F'));
        $created_class = $this->generator->create_class($param);
        $this->assertFalse(empty($created_class));
        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');
        $this->assertEquals($numcourses+1, $aftercourse);
        $this->assertEquals($numrequests+1, $afterrequest);
        $numcourses = $aftercourse;
        $numrequests = $afterrequest;

        // make sure that all created courses belong to 13F
        $terms = $DB->get_fieldset_select('ucla_request_classes', 'term',
                '', array());
        foreach ($terms as $term) {
            $this->assertEquals('13F', $term, 'here1');
        }

        // generate a random crosslisted class
        $param = array(array('term' => '13F'), array('term' => '13F'));
        $created_class = $this->generator->create_class($param);
        $this->assertFalse(empty($created_class));
        $aftercourse = $DB->count_records('course');
        $afterrequest = $DB->count_records('ucla_request_classes');
        $this->assertEquals($numcourses+1, $aftercourse);
        $this->assertEquals($numrequests+2, $afterrequest);
        $numcourses = $aftercourse;
        $numrequests = $afterrequest;

        // make sure that all created courses belong to 13F
        $terms = $DB->get_fieldset_select('ucla_request_classes', 'term',
                '', array());
        foreach ($terms as $term) {
            $this->assertEquals('13F', $term, 'here2');
        }
    }    

    protected function setUp() {
        $this->resetAfterTest(true);
        $this->generator = new local_ucla_generator();
    } 
}
